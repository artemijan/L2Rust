//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use crate::entities::user;
use sea_orm::entity::prelude::*;
use sea_orm::{JoinType, QuerySelect};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "character")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub level: i32,
    pub user_id: i32,
    #[sea_orm(column_type = "custom(\"DATETIME\")", nullable)]
    pub delete_at: Option<ChronoDateTimeUtc>,
}

impl Model {
    /// 
    /// 
    /// # Arguments 
    /// 
    /// * `db_pool`: 
    /// * `username`: 
    /// 
    /// returns: Result<Vec<Model, Global>, `DbErr`>
    /// # Errors
    pub async fn find_characters_by_username(
        db_pool: &DatabaseConnection,
        username: &str,
    ) -> Result<Vec<Model>, DbErr> {
        let characters = Entity::find()
            .join(JoinType::InnerJoin, Entity::has_many(user::Entity).into())
            .filter(user::Column::Username.eq(username))
            .all(db_pool)
            .await?;
        Ok(characters)
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
