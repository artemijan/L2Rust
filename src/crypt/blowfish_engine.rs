use crate::crypt::constants::{KP0, KS0, KS1, KS2, KS3, P_SZ, SBOX_SK};
use rand::prelude::*;
use rand::thread_rng;

pub const BLOWFISH_KEY_SIZE: usize = 16;

pub fn generate_blowfish_key() -> [u8; BLOWFISH_KEY_SIZE] {
    let mut key = [0u8; BLOWFISH_KEY_SIZE];
    let mut rng = thread_rng();
    for item in key.iter_mut().take(BLOWFISH_KEY_SIZE) {
        *item = rng.gen();
    }
    key
}

pub static STATIC_BLOWFISH_KEY: [u8; 16] = [
    154, 125, 7, 25, 132, 212, 137, 240, 220, 37, 6, 180, 21, 131, 47, 197,
];

#[derive(Debug, PartialEq, Clone)]
enum BFTables {
    P,
    S0,
    S1,
    S2,
    S3,
}

#[derive(Debug, Clone)]
pub struct BlowfishEngine {
    s0: [i32; 256],
    s1: [i32; 256],
    s2: [i32; 256],
    s3: [i32; 256],
    p: [i32; 18],
    _ks0: [i32; 256],
    _ks1: [i32; 256],
    _ks2: [i32; 256],
    _ks3: [i32; 256],
    _kp0: [i32; 18],
}

impl BlowfishEngine {
    pub fn new(key: &[u8]) -> BlowfishEngine {
        let _ks0: [i32; 256] = KS0;
        let _ks1: [i32; 256] = KS1;
        let _ks2: [i32; 256] = KS2;
        let _ks3: [i32; 256] = KS3;
        let _kp0: [i32; 18] = KP0;
        let mut engine = BlowfishEngine {
            _ks0,
            _ks1,
            _ks2,
            _ks3,
            _kp0,
            s0: _ks0,
            s1: _ks1,
            s2: _ks2,
            s3: _ks3,
            p: _kp0,
        };
        engine.set_key(key);
        engine
    }

    fn func(&self, x: i32) -> i32 {
        let index0 = (x >> 24) & 0xFF;
        let index1 = (x >> 16) & 0xFF;
        let index2 = (x >> 8) & 0xFF;
        let index3 = x & 0xFF;
        let mut result = self.s0[index0 as usize].wrapping_add(self.s1[index1 as usize]);
        result ^= self.s2[index2 as usize];
        result.wrapping_add(self.s3[index3 as usize])
    }

    fn process_table(&mut self, _xl: i32, _xr: i32, table_type: BFTables, size: usize) {
        let mut xl = _xl;
        let mut xr = _xr;
        for s in (0..size).step_by(2) {
            xl ^= self.p[0];
            xr ^= self.func(xl) ^ self.p[1];
            xl ^= self.func(xr) ^ self.p[2];
            xr ^= self.func(xl) ^ self.p[3];
            xl ^= self.func(xr) ^ self.p[4];
            xr ^= self.func(xl) ^ self.p[5];
            xl ^= self.func(xr) ^ self.p[6];
            xr ^= self.func(xl) ^ self.p[7];
            xl ^= self.func(xr) ^ self.p[8];
            xr ^= self.func(xl) ^ self.p[9];
            xl ^= self.func(xr) ^ self.p[10];
            xr ^= self.func(xl) ^ self.p[11];
            xl ^= self.func(xr) ^ self.p[12];
            xr ^= self.func(xl) ^ self.p[13];
            xl ^= self.func(xr) ^ self.p[14];
            xr ^= self.func(xl) ^ self.p[15];
            xl ^= self.func(xr) ^ self.p[16];
            xr ^= self.p[17];
            match table_type {
                BFTables::S0 => {
                    (self.s0[s], self.s0[s + 1]) = (xr, xl);
                    (xr, xl) = (xl, self.s0[s])
                }
                BFTables::S1 => {
                    (self.s1[s], self.s1[s + 1]) = (xr, xl);
                    (xr, xl) = (xl, self.s1[s])
                }
                BFTables::S2 => {
                    (self.s2[s], self.s2[s + 1]) = (xr, xl);
                    (xr, xl) = (xl, self.s2[s])
                }
                BFTables::S3 => {
                    (self.s3[s], self.s3[s + 1]) = (xr, xl);
                    (xr, xl) = (xl, self.s3[s])
                }
                BFTables::P => {
                    (self.p[s], self.p[s + 1]) = (xr, xl);
                    (xr, xl) = (xl, self.p[s])
                }
            };
        }
    }
    fn process_p(&mut self, key: &[u8]) {
        let key_length = key.len();
        let mut key_index = 0;
        for i in 0..P_SZ {
            let mut data = 0x00000000;
            for _ in 0..4 {
                data = (data << 8) | ((key[key_index] as i32) & 0xff);
                key_index = (key_index + 1) % key_length;
            }
            self.p[i] ^= data;
        }
    }
    fn set_key(&mut self, key: &[u8]) {
        self.process_p(key);
        self.set_p_key();
        self.set_s0_key();
        self.set_s1_key();
        self.set_s2_key();
        self.set_s3_key();
    }

    pub fn encrypt_block(&self, raw: &mut [u8], index: usize) {
        let mut xl = self.bytes_to_32bits(raw, index);
        let mut xr = self.bytes_to_32bits(raw, index + 4);
        xl ^= self.p[0];
        xr ^= self.func(xl) ^ self.p[1];
        xl ^= self.func(xr) ^ self.p[2];
        xr ^= self.func(xl) ^ self.p[3];
        xl ^= self.func(xr) ^ self.p[4];
        xr ^= self.func(xl) ^ self.p[5];
        xl ^= self.func(xr) ^ self.p[6];
        xr ^= self.func(xl) ^ self.p[7];
        xl ^= self.func(xr) ^ self.p[8];
        xr ^= self.func(xl) ^ self.p[9];
        xl ^= self.func(xr) ^ self.p[10];
        xr ^= self.func(xl) ^ self.p[11];
        xl ^= self.func(xr) ^ self.p[12];
        xr ^= self.func(xl) ^ self.p[13];
        xl ^= self.func(xr) ^ self.p[14];
        xr ^= self.func(xl) ^ self.p[15];
        xl ^= self.func(xr) ^ self.p[16];
        xr ^= self.p[17];
        self.bits32_to_bytes(xr, raw, index);
        self.bits32_to_bytes(xl, raw, index + 4);
    }
    pub fn decrypt_block(&self, raw: &mut [u8], index: usize) {
        let mut xl = self.bytes_to_32bits(raw, index);
        let mut xr = self.bytes_to_32bits(raw, index + 4);
        xl ^= self.p[17];
        xr ^= self.func(xl) ^ self.p[16];
        xl ^= self.func(xr) ^ self.p[15];
        xr ^= self.func(xl) ^ self.p[14];
        xl ^= self.func(xr) ^ self.p[13];
        xr ^= self.func(xl) ^ self.p[12];
        xl ^= self.func(xr) ^ self.p[11];
        xr ^= self.func(xl) ^ self.p[10];
        xl ^= self.func(xr) ^ self.p[9];
        xr ^= self.func(xl) ^ self.p[8];
        xl ^= self.func(xr) ^ self.p[7];
        xr ^= self.func(xl) ^ self.p[6];
        xl ^= self.func(xr) ^ self.p[5];
        xr ^= self.func(xl) ^ self.p[4];
        xl ^= self.func(xr) ^ self.p[3];
        xr ^= self.func(xl) ^ self.p[2];
        xl ^= self.func(xr) ^ self.p[1];
        xr ^= self.p[0];
        self.bits32_to_bytes(xr, raw, index);
        self.bits32_to_bytes(xl, raw, index + 4);
    }

    #[allow(arithmetic_overflow)]
    #[allow(overflowing_literals)]
    fn bytes_to_32bits(&self, src: &[u8], index: usize) -> i32 {
        let mut k = (src[index + 3] as i32 & 0xff) << 24;
        k |= (src[index + 2] as i32 & 0xff) << 16;
        k |= (src[index + 1] as i32 & 0xff) << 8;
        k | src[index] as i32 & 0xff
    }

    fn bits32_to_bytes(&self, in_value: i32, dst: &mut [u8], dst_index: usize) {
        dst[dst_index] = (in_value & 0xFF) as u8;
        dst[dst_index + 1] = ((in_value >> 8) & 0xFF) as u8;
        dst[dst_index + 2] = ((in_value >> 16) & 0xFF) as u8;
        dst[dst_index + 3] = ((in_value >> 24) & 0xFF) as u8;
    }
    fn set_p_key(&mut self) {
        self.process_table(0, 0, BFTables::P, self.p.len());
    }
    fn set_s0_key(&mut self) {
        self.process_table(
            self.p[P_SZ - 2],
            self.p[P_SZ - 1],
            BFTables::S0,
            self.s0.len(),
        );
    }
    fn set_s1_key(&mut self) {
        self.process_table(
            self.s0[SBOX_SK - 2],
            self.s0[SBOX_SK - 1],
            BFTables::S1,
            self.s1.len(),
        );
    }
    fn set_s2_key(&mut self) {
        self.process_table(
            self.s1[SBOX_SK - 2],
            self.s1[SBOX_SK - 1],
            BFTables::S2,
            self.s2.len(),
        );
    }
    fn set_s3_key(&mut self) {
        self.process_table(
            self.s2[SBOX_SK - 2],
            self.s2[SBOX_SK - 1],
            BFTables::S3,
            self.s3.len(),
        );
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_bytes_to_32_bits() {
        let (engine, _) = gen_bf_engine_without_key_being_set();
        let num = engine.bytes_to_32bits(&[255, 246, 87, 7], 0); // [-1, -10, 87, 7] / [255, 246, 87, 7]
        let expected = 123205375;
        assert_eq!(expected, num, "Conversion is not okay");
    }

    #[test]
    fn test_32_bits_to_bytes() {
        let (engine, _) = gen_bf_engine_without_key_being_set();
        let mut res = [0; 4];
        engine.bits32_to_bytes(123205375, &mut res, 0); // [-1, -10, 87, 7] / [255, 246, 87, 7]
        assert_eq!(&res, &[255, 246, 87, 7], "Conversion is not okay");
    }

    #[test]
    fn test_process_p() {
        let (mut engine, key) = gen_bf_engine_without_key_being_set();
        engine.process_p(&key);
        let expected = [
            1331667411, 124622946, -550312325, 1864113960, -815139975, -1420713631, -1006266675,
            -2145255195, 776530621, -1172405306, 1920928410, 1485135872, -1412635924, 1270005868,
            -206587424, -651467397, -109699454, 196570026,
        ];
        assert_eq!(engine.p, expected, "Blowfish P key must equal");
    }

    #[test]
    fn test_func() {
        let mut xl: i32 = 0;
        let mut xr: i32 = 0;
        let (mut engine, key) = gen_bf_engine_without_key_being_set();
        engine.process_p(&key);
        let expected_xr = -1582570961;
        let expected_xl = 1331667411;
        xl ^= engine.p[0];
        xr ^= engine.func(xl) ^ engine.p[1];
        assert_eq!(xl, expected_xl, "func is incorrect");
        assert_eq!(xr, expected_xr, "func is incorrect");
    }

    #[test]
    fn test_set_p_key() {
        let (mut engine, key) = gen_bf_engine_without_key_being_set();
        let expected1 = [
            1331667411, 124622946, -550312325, 1864113960, -815139975, -1420713631, -1006266675,
            -2145255195, 776530621, -1172405306, 1920928410, 1485135872, -1412635924, 1270005868,
            -206587424, -651467397, -109699454, 196570026,
        ];
        engine.process_p(&key);
        assert_eq!(engine.p, expected1, "P key must be correct");
        engine.set_p_key();
        let expected = [
            1380425361, 818284978, 1094506548, 982513019, -2036939528, 1971259599, 2077564926,
            -1256875534, -1570502760, -986638966, -1128515323, -1248297172, -539348144,
            -1640291793, 1015029596, -1497303223, 1368507002, -1560842836,
        ];
        assert_eq!(engine.p, expected, "Expect P key to be correct");
    }

    #[test]
    fn test_set_key_works() {
        let s0 = [
            -691475823, 1986715236, 23579618, 1971782562, -1575355424, 921859704, -1940755360,
            -1075380155, -977273942, 732927184, 1693769006, -1042537841, 1402063496, -950768451,
            641007123, 186069453, 661367944, 1298132905, 1822967682, 774208262, -1597311147,
            -2135618272, -1686311081, 551032766, -740836932, 1130020845, 253271712, 409521054,
            566862835, 413785656, -905661916, 609378250, -716141151, -1023833306, 807860736,
            -1600511329, -748546351, 1779298369, 1631797230, -1894768661, -1710392333, 1651016062,
            -687828835, -1732771098, -1430258026, 1729719691, -1434577464, 1755435179, -754268891,
            215638073, -1784348573, -456321015, -2095880848, 2146869785, -844894951, -1201174004,
            -1125250145, -1696973743, -437128397, -249527768, 686965294, 49562658, -1681456980,
            -1958259442, 162970879, -467645767, 419256230, -865486314, 2066339968, 1785972526,
            2063733479, -45851971, 509662256, 828970086, -1597543667, -1450596691, 492327030,
            -2056405921, 1674431606, 828659342, -1440462081, 1090850235, -2052177890, -857163706,
            -408234116, -1315453352, 715767242, -1793709642, 1119838044, 1747915726, -855531853,
            -183790308, -1242157116, 1957235349, -1050260253, 894717520, 1094090033, -2048282888,
            476490619, 306374533, -604509081, 798301677, 1230177358, -2094633611, -1650917748,
            348461404, 1330936431, -1948086871, -787561098, -536623472, 698039693, -908901507,
            -1055154656, -946743255, 857185895, -1974359140, 1902472160, 1352732475, 1322007689,
            69325415, 43261933, 898188499, 358742712, -1849793199, -1976471170, -1869897457,
            722351136, 2129520036, -1376655646, -100378958, 1276365612, -539174320, 1007334550,
            -1304634973, 360357656, -127433237, -946761911, -1343053313, 1402752200, 110142225,
            1015905079, 1725385342, -633427980, 1055122608, -948585873, -1263498574, 1586361979,
            -637970018, 1835420529, 1890732649, 240345993, 811314269, 842649528, 337681243,
            1700775215, -313702848, 1767914512, 1410006732, -1412155400, 824719573, 185849825,
            1019560285, -862229359, 2146682901, -945177318, -1645361321, -72139179, 500719716,
            86392161, 328233489, -727477634, -1730213011, 1078715558, -1654924316, 1827835820,
            1711404904, 907861390, -914300480, 687702207, -843910187, -53582941, -1667111121,
            -229974012, 524603282, -2087896292, 328150875, -903911215, 110902312, -1590536908,
            -1971707657, 1767069643, -822168724, 207920409, 1763131486, -304686649, 1106460607,
            631077528, 150630516, -883088154, -1696961164, 1837739782, -1680513743, 1756521553,
            979514241, -1258429081, 1768724510, -1528729468, -359158644, 571177641, 371803793,
            178905103, 563043081, -80199072, -506377415, 39400292, 14746073, -1905178296,
            1787879088, 478133520, 1624846347, 1364414616, -905921475, -136144084, 1347593351,
            -41694301, 398828722, -1142148082, -1156151652, 628411766, 321573800, -1559200364,
            1303998322, -2004817325, -1641323723, 1601178068, -970047170, -2110055816, -1566784515,
            -1895766866, 824669720, 1369335850, -212229251, -1110993854, 1104871759, -1571164896,
            1598227073, 1894323826, -677349271, -975475757, -73730213, 1452379364, -699958721,
            1179165101, -1717671073, -1727736676, 407528360
        ];
        let s1 = [
            -645569729, 199503686, -1996130610, 409206349, -663737988, -21359101, -489102156,
            489534429, 1453984997, 682557236, 1357922801, -688477322, -243189281, 1200951669,
            1060289735, -79656131, 512679769, -1574503487, -2143773271, -1695223903, -1211916832,
            1030897372, -1688549575, 1093166528, 1793289505, 1226024974, 1133802582, 89680428,
            -1021860149, -533286441, -29208888, 1719478290, 1981001690, 687362263, 210882269,
            -2046208969, -75421936, 465013338, -306721039, 1636017509, 1974775840, -1795357083,
            -1329491856, -516082870, 1986395412, -1677896352, -591927878, 1597127049, -894891247,
            1489819154, 1214845085, 939442290, 194472803, -535052631, 1012086493, -1946398339,
            129402732, 1918170839, -499087685, -1993077452, 1821342163, 829198523, 1448138458,
            2123389501, 211789179, -1220865135, -1572003726, 387774795, -1222301706, 1383463093,
            389564031, -721711665, -245545323, 1286020011, 117249284, -833944764, -841973655,
            -570948972, 1057236408, -562020835, 441597572, -1369432448, -1540729997, -1795149671,
            -1445449348, -1439739432, -1880203244, 1247756968, 1061174927, -1252860180, -232075041,
            498590726, 1034366798, -293194347, 255037439, 754838000, -1169326763, -671184615,
            1923646323, -869924443, -435960169, -1669979996, 1875762932, 109575671, 1944039134,
            -430269440, -1748802682, 1518674510, 2129493470, -112266648, 300413754, 1979463526,
            2015297447, 14777342, 443890442, -1363841600, 878479848, 2133021720, -298030974,
            -1991449715, 796730968, -1915345196, -280368805, -1303382232, 129290119, -998738930,
            -983525163, 2147146103, -1065308774, 1956339405, -495918591, 1356871217, 215602703,
            784096485, 104442517, 1553529870, 703671300, 1793690672, -1378969113, -624234785,
            265570023, -76310760, 679505138, -964607848, 1619278678, -593444652, -1574603311,
            402329503, -1487772571, -847829316, 47291188, -1905249705, -1920207361, 1621181814,
            -1692317780, 1479633804, -1814388731, -1585317844, -165819315, -1672353255, 806893801,
            -1375686716, 1675469115, 1045967964, 1974597702, 414162125, 1712166940, -1621333470,
            -693888768, 1357470427, -1004094442, 662411607, 1898330374, 1673472751, 2040952346,
            1720567945, -1237508894, 1954550981, -466314626, 1388544746, 605325986, 1941815735,
            -994784682, -928694125, 125879418, 92729521, 1265456368, 544556660, -1960952483,
            -1467147872, -1505146393, 1397843563, 1469820471, -1233045888, 332844166, 1873266836,
            -1877752258, -847916390, -1710396078, -122148123, -446804892, -484435498, -1675075919,
            -1381809326, 216853199, 226100530, -580105439, 1969918092, 1079386565, -1762696310,
            1658083914, -245189152, -938896192, 1900626124, -1727952323, 85418610, -2024193125,
            -886845110, 1768331138, 2118490151, 1727312758, 318610562, -1957961521, -1062659818,
            265577540, -1370486037, 187691576, 1178976232, -1921234764, 663141473, -130459589,
            -302479641, 1211473321, 1376768301, -751456239, 1809518084, -348370351, 1613618304,
            -1779053271, 592176339, -1993958576, 115488155, 1938842251, -1756713016, -932618340,
            -1823283227, 1699808675, 1317302064, 1095052857, 22768857, 239575182, 15891326,
            -885622267, 1508384621, 2005915839, -725230277
        ];
        let s2 = [
            -1293323842, -291869158, -526882440, 1764277206, 817932235, 148990137, 2060830212,
            -1359066415, -1369004838, 675107760, 1922795990, 1332246372, -1326816476, -1244030188,
            -1138845656, 1660201268, 1890883629, -2123988829, -67008075, 55861262, -809146157,
            -400699826, 838726938, 1859493406, 1535850253, -1813321085, 1803900627, -454566437,
            1776920367, -449247318, 269788417, 223978665, 2055624325, 177437218, -1606463412,
            -579599583, -1180740069, 604082092, -929452037, -1791711321, -237294980, -2109160554,
            -416662729, 2010257106, -1759851865, -1370353581, -513989262, -1147678539, -670726043,
            -1205822461, -1548477545, -239613056, -841184099, -422115725, -2138882672, 755648247,
            -1165625121, 826894230, 1294353603, -1579627950, 1947626191, -1391687682, 954196651,
            786932166, -307369803, 335920757, -1713626329, -2041775536, 1730912378, 775787544,
            -842613425, -1027805502, 1043667886, 735684973, 1722826935, 1236471404, -1652335593,
            1447547177, -777621619, -358890129, -1287812593, 1143541929, -1136620455, 149806095,
            1354242049, -813021481, 466317937, -1129789214, -1297921507, 1821367629, 1681689978,
            -1146070148, -428818250, 1437329502, -812051746, -2147164521, 226281878, 263192775,
            971630734, 268804222, 262106267, 2060368919, -1839075604, -2013474542, -1926149359,
            -1261398528, -1531886545, 845139741, 1392286141, -453925117, -1619275294, -692561503,
            1298398508, 559304388, -1614226804, 1817981775, 827283575, -2103830570, 1932859139,
            -2029771692, -1625348508, -1307231124, -1302680742, -833885538, 2012973623, 1329770806,
            -455424524, -1572086189, 634670519, -174521485, -1435515472, -1332405169, 182416421,
            500959279, -1650093541, -1460876999, 1565386886, 1144569471, 154160157, -1435881211,
            90207036, -1322256173, -1081577547, 1044499066, 712258755, 589491495, 1347505849,
            -222023363, 1147984205, -1765229384, 1184639415, -55407957, 1362409285, 887970486,
            2054029629, 1689547280, 1322269666, -483376225, 980911686, 1102964477, -708248829,
            2004652592, 523170285, -1617074033, -1051404868, 2142025849, -1889208365, 34902143,
            776389384, 319403029, 1307500403, -136956253, -2022205368, -1238650658, -432707673,
            -376071329, -775116617, -1943845260, -381838336, 1099684951, -1048567098, -950277618,
            1166822388, 275965713, 1305663310, -532545088, 239860198, -1772790111, -1430780484,
            -1028979314, -580714751, 1397478937, -579552638, 245241565, -1648924179, -1332600998,
            1011551197, 1450012496, -510560297, -1441996565, -1287423750, 854814754, 1216438427,
            1009024933, 657029992, -1817687680, 1462210912, 395532420, -2052770743, 2104666872,
            -998550874, 2013838694, 2079581048, -2045656778, 1129760857, 1051518885, 1531534045,
            1165565968, 256526996, 1542430614, 1699819832, 1080896297, -828402564, 1045097114,
            -832074023, 327935220, -145171395, 2136953626, -1789996346, -220727653, -1404373178,
            -59451571, -182032406, -1544322535, 701498462, -1575042808, -946425631, 929283427,
            -398099040, -545695578, -605642810, 1760068237, 836920806, -210864496, -318136045,
            -1468380092, 1069565809, 1969558938, 788555564, 744409184, 654746692, -2098161805,
            404920884, -1319876537, 560703782, 1457636561
        ];
        let s3 = [
            -1652741472, 1715512591, -48305079, 1033769737, -481624415, 318944568, -183564686,
            885373680, 1939929391, -283720919, 810295988, 1577216616, -992879295, -389606402,
            246125013, -1180933707, -1561189444, -390831398, 170314545, -824394258, 1010655829,
            -4605143, -317435684, -1890744922, -1072223682, 994439644, 1752180732, -333866489,
            -35413376, -2094089352, 1173833362, 253620544, -1280206875, 1496704392, 369944955,
            -345594128, -1059213364, -2116464949, 1464548128, 1704346459, 996128563, 772019163,
            1938944600, -860868199, 398515188, 587136205, -111833632, 436232866, 429236937,
            -2027696287, -249975773, 1467899544, 1381551928, 1163030116, 1240319358, 837826751,
            850610652, 111124723, -523086426, 243736287, 300448893, -1937718421, 133094209,
            294965651, 965131441, 1406227382, 310801026, -867997086, 509720043, 1827185065,
            -516887481, -189339760, 160279767, 60211846, 1998689433, 1961284202, -1115611251,
            -1585272492, 812720074, 1583392105, 1374469167, 408521125, 290541669, 596850331,
            -40592451, -1532032411, 2101959590, -1610110197, -359814112, 1311797076, -931578147,
            -591104442, 1606242482, -468243311, 1352455670, 522636555, -1978255695, -1788355862,
            1922659245, 980020476, -1800552363, -1558925559, 1590753795, -1435745616, -1548634335,
            -2019317814, 1021339737, -946953279, -836888391, -1611804797, 1470780413, -1836417341,
            -1191356408, 553899458, 569384969, 1300204211, 2118663703, -1766358112, 1454503741,
            1805602002, 2127462962, -323495806, -623866809, 605223322, -262210674, 1943102152,
            -2175064, -2133234829, -1060498460, -1165051628, -1064487302, 1695446417, -1720663881,
            1191169540, -2103076857, -1732457190, 2066650891, 1054286883, 773535734, 989643360,
            1864612911, 2097982052, -981082407, 1725339590, -200675632, 1425399459, -1888306976,
            692662876, 2016182423, 846129283, 404496020, 1491298464, -720549457, -1879444704,
            1894251318, 642344668, 1174134388, 450997494, 2026213498, 588230797, -339376627,
            -917854520, -625776968, 638692440, -649222395, -1537676679, 390407742, 1231368838,
            293692618, -912314624, -446036482, 46154587, 1163606184, -978845829, 5591929,
            2042741776, 54616735, -2066520234, 1820735507, -185744124, 865718114, 33658521,
            -248989725, 1747505587, -672508546, -828942257, -2092246933, 452269713, 706736329,
            -485703915, -1550508885, 1693391397, -524704552, 1217606951, 1610388179, 363114301,
            429740857, 1820665338, -935194097, 472265980, 1236684038, 129361194, 465506731,
            -16003253, -724436017, 2025866936, 1963307879, 1447251612, 720607135, -1080655600,
            28754092, 1762620658, -1350022389, -1658532754, -941658515, -294081625, -468919262,
            951576338, 2074991226, 2140836033, 1051598247, 82025321, -301881600, 284591599,
            1642495663, 1201515963, 1153125333, -446319406, 1214487439, 326824867, -25507989,
            -141065456, -387421276, -1838018227, -2105961315, -493386214, 1259754823, 2053336172,
            526657598, 442783747, 1298329575, 9351435, -1721773165, -1922102489, -550993054,
            136163624, 1644466109, -30344243, 324652931, -1997438103, 1559954134, -1996497487,
            -999205211, -415442777, -351771219, -687908941
        ];
        let p = [
            1380425361, 818284978, 1094506548, 982513019, -2036939528, 1971259599, 2077564926,
            -1256875534, -1570502760, -986638966, -1128515323, -1248297172, -539348144,
            -1640291793, 1015029596, -1497303223, 1368507002, -1560842836,
        ];
        let key = [
            107, 96, 203, 91, 130, 206, 144, 177, 204, 43, 108, 85, 108, 108, 108, 108,
        ];
        let decryptor = BlowfishEngine::new(&key);
        assert_eq!(decryptor.p, p.as_slice(), "P not equal");
        assert_eq!(decryptor.s0, s0.as_slice(), "S0 not equal");
        assert_eq!(decryptor.s1, s1.as_slice(), "S1 not equal");
        assert_eq!(decryptor.s2, s2.as_slice(), "S2 not equal");
        assert_eq!(decryptor.s3, s3.as_slice(), "S3 not equal");
    }

    fn gen_bf_engine_without_key_being_set() -> (BlowfishEngine, Vec<u8>) {
        let key = [
            107, 96, 203, 91, 130, 206, 144, 177, 204, 43, 108, 85, 108, 108, 108, 108,
        ];
        let _ks0 = KS0;
        let _ks1 = KS1;
        let _ks2 = KS2;
        let _ks3 = KS3;
        let _kp0 = KP0;
        (
            BlowfishEngine {
                _ks0,
                _ks1,
                _ks2,
                _ks3,
                _kp0,
                s0: _ks0,
                s1: _ks1,
                s2: _ks2,
                s3: _ks3,
                p: _kp0,
            },
            key.to_vec(),
        )
    }
}
